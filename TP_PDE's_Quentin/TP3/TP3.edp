verbosity=0;

func real f(){

    if( sqrt( ( x-0.5 )^2 + ( y-0.75 )^2 ) < 0.12 ) {
        return 1;
    }

    else{
        return 0;
    }
}
func real f2(){
   
        return 0;
    
}


func real u0(){

    if( sqrt( ( x-1.5 )^2 + ( y-0.25 )^2 ) < 0.2 ) {
    
        return 100*( 0.2 - sqrt( ( x-1.5 )^2 + ( y-0.25 )^2 ) );
        
    }

    else{
        return 0;
    }  
}

func real u02(){
    return 20;
}

real theta = 1.0;
real deltat = 0.05;

border C1(t=0,2){x = t;y = 0;label = 3;};
border C2(t=0,1){x = 2;y = t;label = 2;};
border C3(t=0,2){x = -t+2;y = 1;label = 2;};
border C4(t=0,1){x = 0;y = 1-t;label = 1;};
mesh Th = buildmesh(C1(50) + C2(50) + C3(50) + C4(50));
plot(Th,wait=true);

fespace Vh(Th, P1);
Vh u,v, uold, fold;

uold = u02();
fold = f2();

real temp = deltat;
    problem Chaleur(u,v) = int2d(Th)( u*v   + theta*deltat*0.1*( dx(u)*dx(v) + dy(u)*dy(v) ) ) - int2d(Th)(uold*v+deltat*fold*v- 0.1*deltat*(1- theta)*(dx(uold)*dx(v) + dy(uold)*dy(v)) ) + on(1,u=100) +on(3,u=-100);

for(int i = 1;i<500;i++){
    Chaleur;
    uold = u;
    plot(u,value=true,fill = 1);
    deltat = temp + deltat;
    Th=adaptmesh(Th,u,0.5);
  //  if(i%50 == 0){
  //      plot(Th,wait = true);
  //  }
}



