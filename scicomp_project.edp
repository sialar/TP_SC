verbosity=0;

real eAlen = 2;
real ePCBlen = 1;
real hPCBlen = 6;
real hIClen = 1.2;
real eIClen = 1;
real maxwidth = ePCBlen + eAlen;
real h1len = 1.2;
real h2len = 3.4;

//	##############
//	### Macros ###
//	##############
macro Grad(u)[dx(u),dy(u)] 					//
macro div(u) (dx(u)+dy(u))					//

//	###################################
//	### fonctions carracteristiques ###
//	###################################
func real IndTh1()
//	Indicatrice Omega 1 (Th1)
{
	if (ePCBlen<=x<=ePCBlen+eIClen && h1len<=y<=h1len+hIClen) { return 1;	}
	return 0;
}

func real IndTh2()
//	Indicatrice Omega 2 (Th2)
{
	if (ePCBlen<=x<=ePCBlen+eIClen && h2len<=y<=h2len+hIClen) { return 1; }
	return 0;
}

func real IndTh3()
//	Indicatrice Omega 3 (Th3)
{
	if (x<=ePCBlen) { return 1; }
	return 0;
}

func real IndTh4()
//	Indicatrice Omega 4 (Th4)
{
	if ((ePCBlen+eIClen<=x<=maxwidth) ||
			(ePCBlen<=x<=ePCBlen+eIClen && h2len+hIClen<=y) ||
			(ePCBlen<=x<=ePCBlen+eIClen && h1len+hIClen<=y<=h2len) ||
			(ePCBlen<=x<=ePCBlen+eIClen && y<=h1len))
	{ return 1; }
	return 0;
}

//##################################################
// functions sources    ###
//#########################

func real fsoventilation(real t)
{
		return 1;//(1 - exp(-t/3));				// fonction source ventilation sur ea
}
func real fso2(real t,real Q)
{
		return Q*(1 - exp(-t));			// vraie fonction source chaleur
}
func real fso1(real t,real Q)
{
		return Q*(1 - exp(-t));			// vraie fonction source chaleur
}


//	############
//	### mesh ###
//	############
int n = 20;

border ePCB(t=0, ePCBlen)						{x=t; y=0; label=1 ;} ;
border ea(t=ePCBlen, maxwidth)			{x=t; y=0; label=2 ;} ;
border lPCB(t=0, hPCBlen)						{x=maxwidth; y=t; label=3;} ;
border ga(t=maxwidth, ePCBlen)			{x=t; y=hPCBlen; label=4;} ;
border gPCB(t=ePCBlen, 0)						{x=t; y=hPCBlen; label=5;} ;
border hPCB(t=hPCBlen, 0)						{x=0; y=t; label=6 ;} ;

border lIC1(t=h1len+hIClen, h1len)			{x=ePCBlen; y=t; label=7;} ;
border gIC1(t=ePCBlen, ePCBlen+eIClen)	{x=t; y= h1len; label=8;} ;
border hIC1(t=h1len, h1len+hIClen)			{x=ePCBlen+eIClen; y=t; label=9;} ;
border eIC1(t=ePCBlen+eIClen, ePCBlen)	{x=t; y= h1len+hIClen; label=10;} ;

border lIC2(t=h2len+hIClen, h2len)			{x=ePCBlen; y=t; label=11;} ;
border gIC2(t=ePCBlen, ePCBlen+eIClen)	{x=t; y= h2len; label=12;} ;
border hIC2(t=h2len, h2len+hIClen)			{x=ePCBlen+eIClen; y=t; label=13;} ;
border eIC2(t=ePCBlen+eIClen, ePCBlen)	{x=t; y= h2len+hIClen; label=14;} ;

border b1(t=0.0, h1len)									{x=ePCBlen; y=t; label=15;} ;
border b2(t=h1len+hIClen, h2len)				{x=ePCBlen; y=t; label=16;} ;
border b3(t=h2len+hIClen, hPCBlen)			{x=ePCBlen; y=t; label=17;} ;

mesh Th = buildmesh	(
											ePCB(n) + ea(n) + hPCB(n) + gPCB(n) + ga(n) + lPCB(n) +
											lIC1(n) + hIC1(n) + eIC1(n) + gIC1(n) +
											lIC2(n) + hIC2(n) + eIC2(n) + gIC2(n) +
											b1(n) + b2(n) + b3(n)
									 	);
plot(Th,wait=1);

mesh Th1 = buildmesh(lIC1(n) + gIC1(n) + hIC1(n) + eIC1(n));
mesh Th2 = buildmesh(lIC2(n) + gIC2(n) + hIC2(n) + eIC2(n));
mesh Th3 = buildmesh(ePCB(n) + b1(n) + lIC1(-n) + b2(n) + lIC2(-n) + b3(n) + gPCB(n) + hPCB(n));
mesh Th4 = buildmesh(ea(n) + lPCB(n) + ga(n) + b3(-n) + eIC2(-n) + hIC2(-n) + gIC2(-n) + b2(-n) + eIC1(-n) + hIC1(-n) + gIC1(-n) + b1(-n));


//	#################
//	### variables ###
//	#################
real dt = 0.1;
real T0 = 300;
real kIC = 2;
real k3 = 0.2;
real k4 = 0.03;
real roCIC = 1.4;
real roC3 = 2;
real roC4 = 0.1;
real Q = 1000000;
real rhof = 1;
real mu = 0.0025;
real nu = mu / rhof;
real alpha=1/dt;

//	##############
//	### spaces ###
//	##############
fespace VhT(Th, P1);
VhT u,v, uold;

fespace VhP(Th4, P1);
VhP p,q;

fespace VhU(Th4, P2);
VhU u1,u2,v1,v2;
VhU up1,up2;

uold = fso1(0,Q);
real temps = 0;
int i = 0;

//	#################################
//	### variationals formulations ###
//	#################################

problem Stokes(u1,u2,p,v1,v2,q,solver=Crout) =
				int2d(Th4)(
					( dx(u1)*dx(v1) + dy(u1)*dy(v1) + dx(u2)*dx(v2) + dy(u2)*dy(v2) )
					+ p*q*(0.000001)
					+ p*dx(v1)+ p*dy(v2)
					+ dx(u1)*q+ dy(u2)*q
				)
				- int2d(Th4)(dy(v1)*(T0 - u) + dy(v2)*(T0 - u))		// link equation chaleur
				+ on(b3,eIC2,hIC2,gIC2,b2,eIC1,hIC1,gIC1,b1, u1=0, u2=0) + on(lPCB,u1=0, u2=0)
				+ on(ea,u1=fsoventilation(temps), u2=fsoventilation(temps));

problem NavierStokes(u1,u2,p,v1,v2,q,solver=Crout,init=i) =
				int2d(Th4)(
					alpha*(u1*v1 + u2*v2)
					+ nu*( dx(u1)*dx(v1)+dy(u1)*dy(v1)+dx(u2)*dx(v2)+dy(u2)*dy(v2))
					+ p*q*(0.000001)
					+ (1./rhof)*(p*dx(v1)+ p*dy(v2))
					+ (1./rhof)*(dx(u1)*q+ dy(u2)*q)
					)
				+	int2d(Th4) ( -alpha*convect([up1,up2],-dt,up1)*v1 -alpha*convect([up1,up2],-dt,up2)*v2)
				// link equation chaleur ( marche pas )
				- int2d(Th2)(dy(v1)*(T0 - u) + dy(v2)*(T0 - u))
				// conditions aux bords
				+ on(8,9,10,12,13,14,15,16,17, u1=0, u2=0) + on(3,u1=0, u2=0)
				+ on(2,u1=fsoventilation(temps), u2=fsoventilation(temps));


problem Chaleur(u,v) =
				int2d(Th)( IndTh1() * (roCIC*u*v + dt*kIC*Grad(u)'*Grad(v)) ) - int2d(Th1)(roCIC*uold*v + dt*fso1(10e10,Q)*v)
			+ int2d(Th)( IndTh2() * (roCIC*u*v + dt*kIC*Grad(u)'*Grad(v)) ) - int2d(Th2)(roCIC*uold*v + dt*fso2(10e10,Q)*v)
			+ int2d(Th)( IndTh3() * (roC3*u*v + dt*k3*Grad(u)'*Grad(v)) ) - int2d(Th3)(roC3*uold*v)
			+	int2d(Th)( IndTh4() * (roC4*u*v + dt*k4*Grad(u)'*Grad(v)) ) - int2d(Th4)(roC4*uold*v)
			// link equation stokes
			- int2d(Th)( IndTh1()*( roCIC*Grad(u)'*[u1,u2]*v))
			- int2d(Th)( IndTh2()*( roCIC*Grad(u)'*[u1,u2]*v))
			- int2d(Th)( IndTh3()*( roC3*Grad(u)'*[u1,u2]*v))
			- int2d(Th)( IndTh4()*( roC4*Grad(u)'*[u1,u2]*v))
			// conditions aux bords
			- int1d(Th,15,16,17)( IndTh4() * dt * (k4*Grad(u)'*[N.x,N.y])*v )
			- int1d(Th,15,16,17)(	IndTh3() * dt * (k3*Grad(u)'*[N.x,N.y])*v )
			//- int1d(Th,4)(IndTh4()*[u1,u2]'*[N.x,N.y]*u*v) // si avec ventilation
			// sources
			+ on(1,u=T0) + on(2,u=T0);

//	####################################
//	### Loop for plot and resolution ###
//	####################################
for(i = 1;i<1500;i++)
{
//	#############
//	### Solve ###
//	#############
		up1=u1;
		up2=u2;
		Chaleur;
		NavierStokes;
		//Stokes;
		uold = u;
		VhP modU = sqrt((u1*u1) + (u2*u2));
//	#####################
//	### plot solution ###
//	#####################
		//plot(u,value=true,fill = 1); // Chaleur seul
		//plot([u1,u2],value=true,fill = 1);	 // Navier Stokes seul
		//plot(modU,value=true,fill = 1);			 // Navier Stokes module seul
		plot(u,[u1,u2],value=true,fill = 1); // Navier Stokes + cheleur
		//plot(u,modU,value=true,fill = 1);		 // Navier Stokes module + cheleur
//	#######################
//	### affichage temps ###
//	#######################
		cout<<"t courant = "<<temps<<endl;
		temps = temps + dt;
		cout<<"ventilation source = "<<fsoventilation(temps)<<endl<<endl;
		//######################
		// adaptmesh
		//######################
		Th=adaptmesh(Th,u,0.5);
		if(i%50 == 0)
			plot(Th,wait = true);
}
